
ADCExample.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000332  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000332  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000332  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000745  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000068b  00000000  00000000  00000b29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000278  00000000  00000000  000011b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  0000142c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038c  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000196  00000000  00000000  000018ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001a42  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  88:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <startConversion>:
}

void startConversion()
{
	// Start conversion
	ADCSRA |= (1 << ADSC);
  90:	ea e7       	ldi	r30, 0x7A	; 122
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
  9a:	08 95       	ret

0000009c <setupADC>:
}

void setupADC()
{
	// ADC settup
	ADMUX = (1 << REFS0) | (1 << MUX2) | (1 << MUX0); // Set reference and pin
  9c:	85 e4       	ldi	r24, 0x45	; 69
  9e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) ; // ADEN - Enables the ADC conversion, ADIE - activate interrupt, ADPS[2:0] a reliable division factor
  a2:	8f e8       	ldi	r24, 0x8F	; 143
  a4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	DIDR0 = (1 << ADC5D); 
  a8:	80 e2       	ldi	r24, 0x20	; 32
  aa:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>

	startConversion(); 
  ae:	0e 94 48 00 	call	0x90	; 0x90 <startConversion>
  b2:	08 95       	ret

000000b4 <main>:

double dutyCycle = 0; 

int main(void)
{
	DDRD = (1 << PORTD6); // Set output
  b4:	80 e4       	ldi	r24, 0x40	; 64
  b6:	8a b9       	out	0x0a, r24	; 10
	TCCR0A = (1 << COM0A1) | (1 << WGM01) | (1 << WGM00);  
  b8:	83 e8       	ldi	r24, 0x83	; 131
  ba:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = (1 << TOIE0); // When it overflows
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
	setupADC(); 
  c2:	0e 94 4e 00 	call	0x9c	; 0x9c <setupADC>
	sei(); 
  c6:	78 94       	sei
	
	TCCR0B = (1 << CS00) | (1 << CS02); // Prescaler
  c8:	85 e0       	ldi	r24, 0x05	; 5
  ca:	85 bd       	out	0x25, r24	; 37

    while (1) 
    {
    }
  cc:	ff cf       	rjmp	.-2      	; 0xcc <main+0x18>

000000ce <__vector_16>:
	// Start conversion
	ADCSRA |= (1 << ADSC);
}

ISR(TIMER0_OVF_vect)
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	2f 93       	push	r18
  da:	3f 93       	push	r19
  dc:	4f 93       	push	r20
  de:	5f 93       	push	r21
  e0:	6f 93       	push	r22
  e2:	7f 93       	push	r23
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
  e8:	af 93       	push	r26
  ea:	bf 93       	push	r27
  ec:	ef 93       	push	r30
  ee:	ff 93       	push	r31
	OCR0A = dutyCycle; 
  f0:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
  f4:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
  f8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
  fc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
 100:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
 104:	67 bd       	out	0x27, r22	; 39
}
 106:	ff 91       	pop	r31
 108:	ef 91       	pop	r30
 10a:	bf 91       	pop	r27
 10c:	af 91       	pop	r26
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	7f 91       	pop	r23
 114:	6f 91       	pop	r22
 116:	5f 91       	pop	r21
 118:	4f 91       	pop	r20
 11a:	3f 91       	pop	r19
 11c:	2f 91       	pop	r18
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <__vector_21>:

ISR(ADC_vect)
{
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	7f 93       	push	r23
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
	dutyCycle = ADC; 
 14a:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 14e:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 f7 00 	call	0x1ee	; 0x1ee <__floatunsisf>
 15a:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 15e:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_edata+0x1>
 162:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>
 166:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_edata+0x3>
	startConversion(); 
 16a:	0e 94 48 00 	call	0x90	; 0x90 <startConversion>
}
 16e:	ff 91       	pop	r31
 170:	ef 91       	pop	r30
 172:	bf 91       	pop	r27
 174:	af 91       	pop	r26
 176:	9f 91       	pop	r25
 178:	8f 91       	pop	r24
 17a:	7f 91       	pop	r23
 17c:	6f 91       	pop	r22
 17e:	5f 91       	pop	r21
 180:	4f 91       	pop	r20
 182:	3f 91       	pop	r19
 184:	2f 91       	pop	r18
 186:	0f 90       	pop	r0
 188:	0f be       	out	0x3f, r0	; 63
 18a:	0f 90       	pop	r0
 18c:	1f 90       	pop	r1
 18e:	18 95       	reti

00000190 <__fixunssfsi>:
 190:	0e 94 3c 01 	call	0x278	; 0x278 <__fp_splitA>
 194:	88 f0       	brcs	.+34     	; 0x1b8 <__fixunssfsi+0x28>
 196:	9f 57       	subi	r25, 0x7F	; 127
 198:	98 f0       	brcs	.+38     	; 0x1c0 <__fixunssfsi+0x30>
 19a:	b9 2f       	mov	r27, r25
 19c:	99 27       	eor	r25, r25
 19e:	b7 51       	subi	r27, 0x17	; 23
 1a0:	b0 f0       	brcs	.+44     	; 0x1ce <__fixunssfsi+0x3e>
 1a2:	e1 f0       	breq	.+56     	; 0x1dc <__fixunssfsi+0x4c>
 1a4:	66 0f       	add	r22, r22
 1a6:	77 1f       	adc	r23, r23
 1a8:	88 1f       	adc	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	1a f0       	brmi	.+6      	; 0x1b4 <__fixunssfsi+0x24>
 1ae:	ba 95       	dec	r27
 1b0:	c9 f7       	brne	.-14     	; 0x1a4 <__fixunssfsi+0x14>
 1b2:	14 c0       	rjmp	.+40     	; 0x1dc <__fixunssfsi+0x4c>
 1b4:	b1 30       	cpi	r27, 0x01	; 1
 1b6:	91 f0       	breq	.+36     	; 0x1dc <__fixunssfsi+0x4c>
 1b8:	0e 94 56 01 	call	0x2ac	; 0x2ac <__fp_zero>
 1bc:	b1 e0       	ldi	r27, 0x01	; 1
 1be:	08 95       	ret
 1c0:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__fp_zero>
 1c4:	67 2f       	mov	r22, r23
 1c6:	78 2f       	mov	r23, r24
 1c8:	88 27       	eor	r24, r24
 1ca:	b8 5f       	subi	r27, 0xF8	; 248
 1cc:	39 f0       	breq	.+14     	; 0x1dc <__fixunssfsi+0x4c>
 1ce:	b9 3f       	cpi	r27, 0xF9	; 249
 1d0:	cc f3       	brlt	.-14     	; 0x1c4 <__fixunssfsi+0x34>
 1d2:	86 95       	lsr	r24
 1d4:	77 95       	ror	r23
 1d6:	67 95       	ror	r22
 1d8:	b3 95       	inc	r27
 1da:	d9 f7       	brne	.-10     	; 0x1d2 <__fixunssfsi+0x42>
 1dc:	3e f4       	brtc	.+14     	; 0x1ec <__fixunssfsi+0x5c>
 1de:	90 95       	com	r25
 1e0:	80 95       	com	r24
 1e2:	70 95       	com	r23
 1e4:	61 95       	neg	r22
 1e6:	7f 4f       	sbci	r23, 0xFF	; 255
 1e8:	8f 4f       	sbci	r24, 0xFF	; 255
 1ea:	9f 4f       	sbci	r25, 0xFF	; 255
 1ec:	08 95       	ret

000001ee <__floatunsisf>:
 1ee:	e8 94       	clt
 1f0:	09 c0       	rjmp	.+18     	; 0x204 <__floatsisf+0x12>

000001f2 <__floatsisf>:
 1f2:	97 fb       	bst	r25, 7
 1f4:	3e f4       	brtc	.+14     	; 0x204 <__floatsisf+0x12>
 1f6:	90 95       	com	r25
 1f8:	80 95       	com	r24
 1fa:	70 95       	com	r23
 1fc:	61 95       	neg	r22
 1fe:	7f 4f       	sbci	r23, 0xFF	; 255
 200:	8f 4f       	sbci	r24, 0xFF	; 255
 202:	9f 4f       	sbci	r25, 0xFF	; 255
 204:	99 23       	and	r25, r25
 206:	a9 f0       	breq	.+42     	; 0x232 <__floatsisf+0x40>
 208:	f9 2f       	mov	r31, r25
 20a:	96 e9       	ldi	r25, 0x96	; 150
 20c:	bb 27       	eor	r27, r27
 20e:	93 95       	inc	r25
 210:	f6 95       	lsr	r31
 212:	87 95       	ror	r24
 214:	77 95       	ror	r23
 216:	67 95       	ror	r22
 218:	b7 95       	ror	r27
 21a:	f1 11       	cpse	r31, r1
 21c:	f8 cf       	rjmp	.-16     	; 0x20e <__floatsisf+0x1c>
 21e:	fa f4       	brpl	.+62     	; 0x25e <__floatsisf+0x6c>
 220:	bb 0f       	add	r27, r27
 222:	11 f4       	brne	.+4      	; 0x228 <__floatsisf+0x36>
 224:	60 ff       	sbrs	r22, 0
 226:	1b c0       	rjmp	.+54     	; 0x25e <__floatsisf+0x6c>
 228:	6f 5f       	subi	r22, 0xFF	; 255
 22a:	7f 4f       	sbci	r23, 0xFF	; 255
 22c:	8f 4f       	sbci	r24, 0xFF	; 255
 22e:	9f 4f       	sbci	r25, 0xFF	; 255
 230:	16 c0       	rjmp	.+44     	; 0x25e <__floatsisf+0x6c>
 232:	88 23       	and	r24, r24
 234:	11 f0       	breq	.+4      	; 0x23a <__floatsisf+0x48>
 236:	96 e9       	ldi	r25, 0x96	; 150
 238:	11 c0       	rjmp	.+34     	; 0x25c <__floatsisf+0x6a>
 23a:	77 23       	and	r23, r23
 23c:	21 f0       	breq	.+8      	; 0x246 <__floatsisf+0x54>
 23e:	9e e8       	ldi	r25, 0x8E	; 142
 240:	87 2f       	mov	r24, r23
 242:	76 2f       	mov	r23, r22
 244:	05 c0       	rjmp	.+10     	; 0x250 <__floatsisf+0x5e>
 246:	66 23       	and	r22, r22
 248:	71 f0       	breq	.+28     	; 0x266 <__floatsisf+0x74>
 24a:	96 e8       	ldi	r25, 0x86	; 134
 24c:	86 2f       	mov	r24, r22
 24e:	70 e0       	ldi	r23, 0x00	; 0
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	2a f0       	brmi	.+10     	; 0x25e <__floatsisf+0x6c>
 254:	9a 95       	dec	r25
 256:	66 0f       	add	r22, r22
 258:	77 1f       	adc	r23, r23
 25a:	88 1f       	adc	r24, r24
 25c:	da f7       	brpl	.-10     	; 0x254 <__floatsisf+0x62>
 25e:	88 0f       	add	r24, r24
 260:	96 95       	lsr	r25
 262:	87 95       	ror	r24
 264:	97 f9       	bld	r25, 7
 266:	08 95       	ret

00000268 <__fp_split3>:
 268:	57 fd       	sbrc	r21, 7
 26a:	90 58       	subi	r25, 0x80	; 128
 26c:	44 0f       	add	r20, r20
 26e:	55 1f       	adc	r21, r21
 270:	59 f0       	breq	.+22     	; 0x288 <__fp_splitA+0x10>
 272:	5f 3f       	cpi	r21, 0xFF	; 255
 274:	71 f0       	breq	.+28     	; 0x292 <__fp_splitA+0x1a>
 276:	47 95       	ror	r20

00000278 <__fp_splitA>:
 278:	88 0f       	add	r24, r24
 27a:	97 fb       	bst	r25, 7
 27c:	99 1f       	adc	r25, r25
 27e:	61 f0       	breq	.+24     	; 0x298 <__fp_splitA+0x20>
 280:	9f 3f       	cpi	r25, 0xFF	; 255
 282:	79 f0       	breq	.+30     	; 0x2a2 <__fp_splitA+0x2a>
 284:	87 95       	ror	r24
 286:	08 95       	ret
 288:	12 16       	cp	r1, r18
 28a:	13 06       	cpc	r1, r19
 28c:	14 06       	cpc	r1, r20
 28e:	55 1f       	adc	r21, r21
 290:	f2 cf       	rjmp	.-28     	; 0x276 <__fp_split3+0xe>
 292:	46 95       	lsr	r20
 294:	f1 df       	rcall	.-30     	; 0x278 <__fp_splitA>
 296:	08 c0       	rjmp	.+16     	; 0x2a8 <__fp_splitA+0x30>
 298:	16 16       	cp	r1, r22
 29a:	17 06       	cpc	r1, r23
 29c:	18 06       	cpc	r1, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	f1 cf       	rjmp	.-30     	; 0x284 <__fp_splitA+0xc>
 2a2:	86 95       	lsr	r24
 2a4:	71 05       	cpc	r23, r1
 2a6:	61 05       	cpc	r22, r1
 2a8:	08 94       	sec
 2aa:	08 95       	ret

000002ac <__fp_zero>:
 2ac:	e8 94       	clt

000002ae <__fp_szero>:
 2ae:	bb 27       	eor	r27, r27
 2b0:	66 27       	eor	r22, r22
 2b2:	77 27       	eor	r23, r23
 2b4:	cb 01       	movw	r24, r22
 2b6:	97 f9       	bld	r25, 7
 2b8:	08 95       	ret

000002ba <_exit>:
 2ba:	f8 94       	cli

000002bc <__stop_program>:
 2bc:	ff cf       	rjmp	.-2      	; 0x2bc <__stop_program>
